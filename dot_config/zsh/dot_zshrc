# user specific initialization
if [[ -f "${HOME}/.preinitialization.sh" ]]; then
	source "${HOME}/.preinitialization.sh"
else
	source "${HOME}/.minimalrc"
fi

# history settings
export HISTFILE=${HOME}/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000
setopt append_history
setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_save_no_dups
setopt extended_history

# use up to search history for lines beginning with the same pattern
autoload -Uz up-line-or-beginning-search
autoload -Uz down-line-or-beginning-search
autoload -Uz complist
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
[[ -n ${key[Up]} ]] && bindkey "${key[Up]}" up-line-or-beginning-search
[[ -n ${key[Down]} ]] && bindkey "${key[Down]}" down-line-or-beginning-search
# make Ctrl-K and Ctrl-J act like Up and Down
bindkey -M viins ^K up-line-or-beginning-search
bindkey -M viins ^J down-line-or-beginning-search
bindkey -M vicmd ^K up-line-or-beginning-search
bindkey -M vicmd ^J down-line-or-beginning-search
bindkey -M viins ^U backward-word
bindkey -M viins ^D forward-word
zmodload zsh/complist
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'l' vi-forward-char

# Change cursor shape for different vi modes.
_fix_cursor() {
	echo -ne '\e[6 q'
}

function zle-keymap-select {
	if [[ ${KEYMAP} == vicmd ]] ||
		[[ $1 = 'block' ]]; then
		echo -ne '\e[2 q'
	elif [[ ${KEYMAP} == main ]] ||
		[[ ${KEYMAP} == viins ]] ||
		[[ ${KEYMAP} = '' ]] ||
		[[ $1 = 'beam' ]]; then
		_fix_cursor
	fi
}
zle -N zle-keymap-select
precmd_functions+=(_fix_cursor)

# function zle-line-init() {
#     zle -K viins
#     echo -ne "\e[5 q"
# }
# zle -N zle-line-init

# set the window title for the shell
function _set_win_title(){
	SHORT_CWD=$(print -P "%20<...<%~%<<")
    echo -ne "\033]0;$SHORT_CWD\007"
}

# emit current working directory using osc 7 terminal escape code
# https://iterm2.com/documentation-escape-codes.html
# https://github.com/wez/wezterm/discussions/3718
# https://wezfurlong.org/wezterm/config/lua/config/default_cwd.html
# https://github.com/wez/wezterm/discussions/4945
_urlencode() {
	local length="${#1}"
	for (( i = 0; i < length; i++ )); do
		local c="${1:$i:1}"
		case $c in
			%) printf '%%%02X' "'$c" ;;
			*) printf "%s" "$c" ;;
		esac
	done
}
_set_cwd_osc7() {
	EP="$(_urlencode "$PWD")"
	echo -ne "\033]7;file://$HOSTNAME/$EP\033\\"
}

# This function emits an OSC 1337 sequence to set a user var
# associated with the current terminal pane.
# It requires the `base64` utility to be available in the path.
__wezterm_set_user_var() {
	if hash base64 2>/dev/null; then
		if [[ -z "${TMUX-}" ]]; then
			# shellcheck disable=SC2046
			printf "\033]1337;SetUserVar=%s=%s\007" "$1" $(echo -n "$2" | base64)
		else
			# <https://github.com/tmux/tmux/wiki/FAQ#what-is-the-passthrough-escape-sequence-and-how-do-i-use-it>
			# Note that you ALSO need to add "set -g allow-passthrough on" to your tmux.conf
			# shellcheck disable=SC2046
			printf "\033Ptmux;\033\033]1337;SetUserVar=%s=%s\007\033\\" "$1" $(echo -n "$2" | base64)
		fi
	fi
}

_set_wezterm_vars_precmd() {
	__wezterm_set_user_var "WEZTERM_PROG" "zsh"
	__wezterm_set_user_var "WEZTERM_USER" "$(id -un)"
	__wezterm_set_user_var "WEZTERM_HOST" "${WEZTERM_HOSTNAME}"
	# Indicate whether this pane is running inside tmux or not
	if [[ -n "${TMUX-}" ]]; then
		__wezterm_set_user_var "WEZTERM_IN_TMUX" "1"
	else
		__wezterm_set_user_var "WEZTERM_IN_TMUX" "0"
	fi
}

_set_wezterm_vars_preexec() {
  # Tell wezterm the full command that is being run
  __wezterm_set_user_var "WEZTERM_PROG" "$1"
}

# execute functions whenever a directory change occurs
# not used for osc7, because when creating a tmux split, the initial dir is not emitted
# and the next split lands somewhere...
# autoload -Uz add-zsh-hook
# add-zsh-hook -Uz chpwd osc7_cwd

# emit the window title and the cwd via osc 7 escape code every time zsh detects a change in directory
precmd_functions+=(_set_win_title _set_cwd_osc7 _set_wezterm_vars_precmd)
preexec_functions+=(_set_wezterm_vars_preexec)

zstyle ':completion:*' completer _extensions _expand_alias _complete _approximate
zstyle ':completion:*:approximate:::' max-errors 4 numeric

# case insensitive completion - was the only thing I used from oh-my-zsh
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Complete . and .. special directories
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' list-dirs-first true
zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' group-name ''
# shellcheck disable=SC2296
zstyle ':completion:*:default' list-colors "${(s.:.)LS_COLORS}" "ma=48;5;4;38;5;255"
# Don't complete unavailable commands.
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'
# General styling, note that this is using tag names
zstyle ':completion:*:descriptions'  format '%F{#a89984}-- %d --%f'
zstyle ':completion:*:corrections'   format '%F{#b8bb26}-- %d (errors: %e) --%f'
zstyle ':completion:*:messages'      format '%B%F{#d3869b}-- %d --%f%b'
zstyle ':completion:*:warnings'      format '%B%F{#cc241d} no matches found %f%b'

# Kill
# shellcheck disable=SC2016
zstyle ':completion:*:*:*:*:processes' command 'ps -u $LOGNAME -o pid,user,command -w'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*' insert-ids menu
# Git
zstyle ':completion:*:*:git:*' group-order 'main commands' 'alias commands' 'external commands'

# automatically load bash completion functions
autoload -U +X bashcompinit && bashcompinit

# start autocompletion only here, if it hasn't been started already via
# the carapace init script
if [[ -z "${CARAPACE_EXCLUDES}" ]]; then
	autoload -Uz compinit && compinit
fi

if [[ -d "${HOME}/.config/zsh/zsh-autosuggestions" ]]; then
	# autosuggestion
	export ZSH_AUTOSUGGEST_STRATEGY=(history completion)
	export ZSH_AUTOSUGGEST_USE_ASYNC=true
	export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
	export ZSH_AUTOSUGGEST_MANUAL_REBIND=true
	export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=243"
	bindkey '^ ' autosuggest-accept
	# shellcheck disable=SC1091
	source "${ZDOTDIR}/zsh-autosuggestions/zsh-autosuggestions.zsh"
fi

# prompt customization
# shellcheck disable=SC2086
[[ -x "${HOME}/.cargo/bin/starship" || -x "/opt/homebrew/bin/starship" ]] && eval "$(starship init zsh)"

# my personal initialization script 2nd part
[[ -f "${HOME}/.postinitialization.sh" ]] && source "${HOME}/.postinitialization.sh"
