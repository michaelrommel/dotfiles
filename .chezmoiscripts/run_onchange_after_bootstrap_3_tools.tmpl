#! /usr/bin/env bash

# This script should install all necessary packages and tools for 
# the "tools" version of the dotfiles
#
{{ if not (has "tools" .global.roles)  -}}
exit 0
{{ end -}}

echo "bootstrap tools"

source "${HOME}/bin/helper.sh"

cd "${HOME}" || exit
# version manager for tools
if [[ ! -f "${HOME}/bin/mise" ]]; then
	source "${HOME}/bin/update_mise.sh"
fi

# if we do not set those paths here, then all installed binaries
# that were installed using mise, cannot be found. We want to be able
# to rerun this script multiple times without errors
source "${HOME}/.path.d/40_go.sh"
source "${HOME}/.path.d/50_mise.bash"
source "${HOME}/.path.d/99_default.sh"
eval "$(mise hook-env)"

if is_mac; then
	desired=(ripgrep@13.0 fd@8.7 bat@0.23 bat-extras@2023.03
		shellcheck@0.9 shfmt@3.6 universal-ctags)
	# pyenv pyenv-virtualenv
	missing=()
	check_brewed "missing" "${desired[@]}"
	if [[ "${#missing[@]}" -gt 0 ]]; then
		echo "(brew) installing ${missing[*]}"
		brew install "${missing[@]}"
	fi
else
	desired=( asciidoctor universal-ctags xz-utils )
	eval "$(grep VERSION_ID /etc/os-release)"
	if [[ ${VERSION_ID} -ge 13 ]]; then
		desired+=(libncurses-dev )
	else
		desired+=(libncurses5-dev )
	fi
	missing=()
	check_dpkged "missing" "${desired[@]}"
	if [[ "${#missing[@]}" -gt 0 ]]; then
		echo "(apt) installing ${missing[*]}"
		sudo apt-get -y update
		sudo apt-get -y install "${missing[@]}"
	fi

	if ! rg -V >/dev/null 2>&1; then
		echo "Installing ripgrep from github"
		cd "${HOME}" || exit
		mkdir -p "${HOME}/software/archives"
		cd "${HOME}/software/archives" || exit
		curl -OL https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep_13.0.0_amd64.deb
		sudo dpkg -i "${HOME}/software/archives/ripgrep_13.0.0_amd64.deb"
	fi

	if ! fd -V >/dev/null 2>&1; then
		echo "Installing fd from github"
		# provides faster find version, not available for Ubuntu 18.04
		cd "${HOME}" || exit
		mkdir -p "${HOME}/software/archives"
		cd "${HOME}/software/archives" || exit
		curl -OL https://github.com/sharkdp/fd/releases/download/v8.7.0/fd_8.7.0_amd64.deb
		sudo dpkg -i "${HOME}/software/archives/fd_8.7.0_amd64.deb"
	fi

	if ! shfmt --version >/dev/null 2>&1; then
		echo "Installing shell formatter shfmt via go"
		if ! go version >/dev/null 2>&1; then
			source "${HOME}/bin/install_go.sh"
		fi
		go install mvdan.cc/sh/v3/cmd/shfmt@latest
	fi

	if ! bat -V >/dev/null 2>&1; then
		echo "Installing bat from github"
		# provides syntax highlighting pager
		cd "${HOME}" || exit
		mkdir -p "${HOME}/software/archives"
		cd "${HOME}/software/archives" || exit
		curl -OL https://github.com/sharkdp/bat/releases/download/v0.23.0/bat_0.23.0_amd64.deb
		sudo dpkg -i "${HOME}/software/archives/bat_0.23.0_amd64.deb"
	fi

	if [[ ! -f "${HOME}/software/bat/bin/batman" ]]; then
		echo "Installing bat-extras from github"
		cd "${HOME}" || exit
		mkdir -p "${HOME}/software"
		git clone --depth 1 https://github.com/eth-p/bat-extras.git "${HOME}/software/bat"
		cd "${HOME}/software/bat" || exit
		./build.sh --no-manuals --no-verify
	fi

	if ! shellcheck -V >/dev/null 2>&1; then
		echo "Installing shellcheck from github"
		mkdir -p "${HOME}/software"
		cd "${HOME}/software" || exit
		scversion="stable" # or "v0.4.7", or "latest"
		curl -sL "https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz" | tar -xJ
	fi
fi

